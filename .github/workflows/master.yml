name: Deploy Node.js Backend

on:
  push:
    branches: [ "main" ]
    paths:
      - 'node-backend/**'  # Only trigger when Node.js files change
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: 761018874863.dkr.ecr.us-east-1.amazonaws.com/node-color-api
  CLUSTER_NAME: react-app-v2
  SERVICE_NAME: node-color-service
  CONTAINER_NAME: node-api
  TASK_FAMILY: node-color-api

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_IAM_ROLE }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      working-directory: ./node-backend
      run: |
        docker build -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
        docker push ${{ env.ECR_REPOSITORY }}:${{ github.sha }}

    - name: Register task definition
      id: register-task
      run: |
        # Get current task definition
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.TASK_FAMILY }} --region ${{ env.AWS_REGION }})
        
        # Create new task definition JSON
        NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | \
          jq --arg IMAGE "${{ env.ECR_REPOSITORY }}:${{ github.sha }}" \
          --arg CONTAINER "${{ env.CONTAINER_NAME }}" \
          '{
            family: .taskDefinition.family,
            containerDefinitions: [.taskDefinition.containerDefinitions[] | if .name == $CONTAINER then .image = $IMAGE else . end],
            networkMode: .taskDefinition.networkMode,
            executionRoleArn: .taskDefinition.executionRoleArn,
            requiresCompatibilities: .taskDefinition.requiresCompatibilities,
            cpu: .taskDefinition.cpu,
            memory: .taskDefinition.memory
          }')
        
        # Register new revision
        aws ecs register-task-definition \
          --cli-input-json "$NEW_TASK_DEFINITION" \
          --region ${{ env.AWS_REGION }}
        
        # Get new revision number
        NEW_REVISION=$(aws ecs describe-task-definition --task-definition ${{ env.TASK_FAMILY }} --region ${{ env.AWS_REGION }} | jq -r '.taskDefinition.revision')
        echo "NEW_REVISION=$NEW_REVISION" >> $GITHUB_OUTPUT

    - name: Deploy service
      run: |
        aws ecs update-service \
          --cluster ${{ env.CLUSTER_NAME }} \
          --service ${{ env.SERVICE_NAME }} \
          --task-definition ${{ env.TASK_FAMILY }}:${{ steps.register-task.outputs.NEW_REVISION }} \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

    - name: Verify deployment
      run: |
        echo "Waiting for service to stabilize..."
        aws ecs wait services-stable \
          --cluster ${{ env.CLUSTER_NAME }} \
          --services ${{ env.SERVICE_NAME }} \
          --region ${{ env.AWS_REGION }}
        echo "Deployment successful!"
