name: Deploy Node.js Backend

on:
  push:
    branches: [ "main" ]
    paths:
      - 'node-backend/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Set SHA and commit time
        id: vars
        run: |
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: commit time
        id: time
        run: |
          echo "commit_time=$(git show -s --format=%cd --date=format:'%Y-%m-%d' ${{ steps.vars.outputs.sha }})" >> $GITHUB_OUTPUT
      - name: Configure AWS credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 761018874863.dkr.ecr.us-east-1.amazonaws.com

      - name: Build & Push Docker image
        working-directory: ./node-backend
        run: |
          IMAGE_TAG=761018874863.dkr.ecr.us-east-1.amazonaws.com/node-color-api:main-${{ steps.time.outputs.commit_time }}-${{ steps.vars.outputs.sha }}
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

      - name: Register new ECS Task Definition
        id: register-task
        run: |
          IMAGE=761018874863.dkr.ecr.us-east-1.amazonaws.com/node-color-api:main-${{ steps.time.outputs.commit_time }}-${{ steps.vars.outputs.sha }}
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition node-color-api | \
            jq '{
              family: .taskDefinition.family,
              containerDefinitions: .taskDefinition.containerDefinitions,
              networkMode: .taskDefinition.networkMode,
              volumes: .taskDefinition.volumes,
              placementConstraints: .taskDefinition.placementConstraints,
              requiresCompatibilities: .taskDefinition.requiresCompatibilities,
              cpu: .taskDefinition.cpu,
              memory: .taskDefinition.memory
            } + (if .taskDefinition.tags and (.taskDefinition.tags | length) > 0 then {tags: .taskDefinition.tags} else {} end)')

          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$IMAGE" '.containerDefinitions[0].image = $IMAGE')

          aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION"

          NEW_REVISION=$(aws ecs describe-task-definition --task-definition node-color-api | jq -r '.taskDefinition.revision')
          echo "NEW_REVISION=$NEW_REVISION" >> $GITHUB_OUTPUT

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster react-app-v2 \
            --service node-color-service \
            --task-definition node-color-api:${{ steps.register-task.outputs.NEW_REVISION }} \
            --force-new-deployment \
            --region us-east-1

      - name: Wait for service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster react-app-v2 \
            --services node-color-service \
            --region us-east-1
